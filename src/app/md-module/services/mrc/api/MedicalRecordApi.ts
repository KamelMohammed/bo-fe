/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class MedicalRecordApi {
    protected basePath = 'https://fidcarefe.dev.kiranet.it/api/mrc';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @summary Create a new medical record
     * @param request request
     */
    public create (request: models.MedicalRecordRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.MedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling create.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get the list of the medical records filtered by the district of the operator
     * @param districtCode District&#39;s code of the operator
     * @param page page
     * @param size size
     */
    public list (districtCode: string, page?: number, size?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageMedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords/district/{districtCode}'
            .replace('{' + 'districtCode' + '}', encodeURIComponent(String(districtCode)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'districtCode' is not null or undefined
        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling list.');
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get the list of the medical records associated to district filtered by multiple params
     * @param districtCode District&#39;s code of the operator
     * @param code 
     * @param endDate 
     * @param nosological 
     * @param page page
     * @param patientName 
     * @param patientSurname 
     * @param size size
     * @param startDate 
     * @param status 
     */
    public list1 (districtCode: string, code?: string, endDate?: string, nosological?: string, page?: number, patientName?: string, patientSurname?: string, size?: number, startDate?: string, status?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageMedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords/district/{districtCode}/filter'
            .replace('{' + 'districtCode' + '}', encodeURIComponent(String(districtCode)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'districtCode' is not null or undefined
        if (districtCode === null || districtCode === undefined) {
            throw new Error('Required parameter districtCode was null or undefined when calling list1.');
        }

        if (code !== undefined) {
            queryParameters['code'] = code;
        }

        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }

        if (nosological !== undefined) {
            queryParameters['nosological'] = nosological;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (patientName !== undefined) {
            queryParameters['patientName'] = patientName;
        }

        if (patientSurname !== undefined) {
            queryParameters['patientSurname'] = patientSurname;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }

        if (status !== undefined) {
            queryParameters['status'] = status;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get the list of the medical records associated to doctor filtered by multiple params
     * @param code 
     * @param endDate 
     * @param nosological 
     * @param page page
     * @param patientName 
     * @param patientSurname 
     * @param size size
     * @param startDate 
     * @param status 
     */
    public list2 (code?: string, endDate?: string, nosological?: string, page?: number, patientName?: string, patientSurname?: string, size?: number, startDate?: string, status?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageMedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords/doctor/filter';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (code !== undefined) {
            queryParameters['code'] = code;
        }

        if (endDate !== undefined) {
            queryParameters['endDate'] = endDate;
        }

        if (nosological !== undefined) {
            queryParameters['nosological'] = nosological;
        }

        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (patientName !== undefined) {
            queryParameters['patientName'] = patientName;
        }

        if (patientSurname !== undefined) {
            queryParameters['patientSurname'] = patientSurname;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        if (startDate !== undefined) {
            queryParameters['startDate'] = startDate;
        }

        if (status !== undefined) {
            queryParameters['status'] = status;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get the list of the medical records filtered by doctor id
     * @param page page
     * @param size size
     */
    public list3 (page?: number, size?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageMedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords/doctor';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get the list of the medical records filtered by patient id
     * @param page page
     * @param size size
     */
    public list4 (page?: number, size?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.PageMedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords/patient';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (page !== undefined) {
            queryParameters['page'] = page;
        }

        if (size !== undefined) {
            queryParameters['size'] = size;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Get the details of the medical record given the ID
     * @param id MedicalRecord&#39;s id
     */
    public list5 (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.MedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling list5.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @summary Update Medical Record status
     * @param id id
     * @param status Status must be CHIUSA
     * @param note Closing reason
     */
    public update (id: string, status: string, note?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.MedicalRecordRequest> {
        const localVarPath = this.basePath + '/medicalrecords/{id}/{status}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'status' + '}', encodeURIComponent(String(status)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling update.');
        }

        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling update.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: note,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
