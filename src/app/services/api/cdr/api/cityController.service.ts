/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';

import { Configuration } from '../configuration';
import { CustomHttpUrlEncodingCodec } from '../encoder';
import { CityDTO } from '../model/cityDTO';
import { BASE_PATH } from '../variables';



@Injectable()
export class CityControllerService {

  protected basePath = 'https://fidcare.kiranet.it/api/cdr';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * View single city by descrition
   *
   * @param description City description
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCityByDescriptionUsingGET(description: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CityDTO>>;
  public getCityByDescriptionUsingGET(description: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityDTO>>>;
  public getCityByDescriptionUsingGET(description: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityDTO>>>;
  public getCityByDescriptionUsingGET(description: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (description === null || description === undefined) {
      throw new Error('Required parameter description was null or undefined when calling getCityByDescriptionUsingGET.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (description !== undefined && description !== null) {
      queryParameters = queryParameters.set('description', <any>description);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<CityDTO>>(`${this.basePath}/cities/description`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * View single city by id
   *
   * @param uuid Id of the city
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCityUsingGET(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<CityDTO>;
  public getCityUsingGET(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CityDTO>>;
  public getCityUsingGET(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CityDTO>>;
  public getCityUsingGET(uuid: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (uuid === null || uuid === undefined) {
      throw new Error('Required parameter uuid was null or undefined when calling getCityUsingGET.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<CityDTO>(`${this.basePath}/cities/${encodeURIComponent(String(uuid))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * View cities list by uuid province
   *
   * @param uuid UUID Province
   * @param date date
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public loadCitiesByProvinceUsingGET(uuid: string, date?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<CityDTO>>;
  public loadCitiesByProvinceUsingGET(uuid: string, date?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityDTO>>>;
  public loadCitiesByProvinceUsingGET(uuid: string, date?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityDTO>>>;
  public loadCitiesByProvinceUsingGET(uuid: string, date?: Date, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (uuid === null || uuid === undefined) {
      throw new Error('Required parameter uuid was null or undefined when calling loadCitiesByProvinceUsingGET.');
    }


    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (date !== undefined && date !== null) {
      queryParameters = queryParameters.set('date', <any>date.toISOString());
    }
    if (uuid !== undefined && uuid !== null) {
      queryParameters = queryParameters.set('uuid', <any>uuid);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<CityDTO>>(`${this.basePath}/cities/province`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * View a list of cities filtered by start date and end date
   *
   * @param date Date for perform filtering. Date format &#39;yyyy-MM-dd&#39;.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public loadCitiesUsingGET(date: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<CityDTO>>;
  public loadCitiesUsingGET(date: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityDTO>>>;
  public loadCitiesUsingGET(date: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityDTO>>>;
  public loadCitiesUsingGET(date: Date, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (date === null || date === undefined) {
      throw new Error('Required parameter date was null or undefined when calling loadCitiesUsingGET.');
    }

    let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
    if (date !== undefined && date !== null) {
      queryParameters = queryParameters.set('date', <any>date.toISOString());
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.get<Array<CityDTO>>(`${this.basePath}/cities`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
