/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AvviaTeleconsultoResponse } from '../model/avviaTeleconsultoResponse';
import { ChiudiTeleconsultoRequest } from '../model/chiudiTeleconsultoRequest';
import { ChiudiTeleconsultoResponse } from '../model/chiudiTeleconsultoResponse';
import { ControllerErrorResponse } from '../model/controllerErrorResponse';
import { CreateTeleconsultoRequest } from '../model/createTeleconsultoRequest';
import { CreateTeleconsultoResponse } from '../model/createTeleconsultoResponse';
import { DeleteTeleconsultoResponse } from '../model/deleteTeleconsultoResponse';
import { TeleconsultoDettaglioEventoResponse } from '../model/teleconsultoDettaglioEventoResponse';
import { TeleconsultoDettaglioResponse } from '../model/teleconsultoDettaglioResponse';
import { TeleconsultoListaCreatiSpecialistaResponse } from '../model/teleconsultoListaCreatiSpecialistaResponse';
import { TeleconsultoListaRicevutiSpecialistaResponse } from '../model/teleconsultoListaRicevutiSpecialistaResponse';
import { UpdateTeleconsultoPartecipanteStatoResponse } from '../model/updateTeleconsultoPartecipanteStatoResponse';
import { UpdateTeleconsultoRequest } from '../model/updateTeleconsultoRequest';
import { UpdateTeleconsultoResponse } from '../model/updateTeleconsultoResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TeleconsultoControllerService {

    protected basePath = 'http://127.0.0.1:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Servizio #19 | Accetta l’invito ad un teleconsulto. | US3.006– Accetta invito teleconsulto
     * 
     * @param id ID teleconsulto
     * @param idPartecipante ID partecipante
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accettaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe?: 'body', reportProgress?: boolean): Observable<UpdateTeleconsultoPartecipanteStatoResponse>;
    public accettaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTeleconsultoPartecipanteStatoResponse>>;
    public accettaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTeleconsultoPartecipanteStatoResponse>>;
    public accettaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accettaTeleconsultoUsingPOST.');
        }

        if (idPartecipante === null || idPartecipante === undefined) {
            throw new Error('Required parameter idPartecipante was null or undefined when calling accettaTeleconsultoUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<UpdateTeleconsultoPartecipanteStatoResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}/partecipanti/${encodeURIComponent(String(idPartecipante))}/accetta`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #23 | Gestisce l’integrazione con il sistema di terze parti Zoom. | US4.001– Avvia televisita/teleconsulto
     * 
     * @param id ID teleconsulto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public avviaTeleconsultoUsingPOST(id: string, observe?: 'body', reportProgress?: boolean): Observable<AvviaTeleconsultoResponse>;
    public avviaTeleconsultoUsingPOST(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AvviaTeleconsultoResponse>>;
    public avviaTeleconsultoUsingPOST(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AvviaTeleconsultoResponse>>;
    public avviaTeleconsultoUsingPOST(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling avviaTeleconsultoUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<AvviaTeleconsultoResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}/avvia`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #25 | Salva l’esito del collegamento di Teleconsulto. | US4.002– Chiude televisita/teleconsulto
     * 
     * @param chiudiTeleconsultoRequest chiudiTeleconsultoRequest
     * @param id ID teleconsulto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chiudiTeleconsultoUsingPUT(chiudiTeleconsultoRequest: ChiudiTeleconsultoRequest, id: string, observe?: 'body', reportProgress?: boolean): Observable<ChiudiTeleconsultoResponse>;
    public chiudiTeleconsultoUsingPUT(chiudiTeleconsultoRequest: ChiudiTeleconsultoRequest, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChiudiTeleconsultoResponse>>;
    public chiudiTeleconsultoUsingPUT(chiudiTeleconsultoRequest: ChiudiTeleconsultoRequest, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChiudiTeleconsultoResponse>>;
    public chiudiTeleconsultoUsingPUT(chiudiTeleconsultoRequest: ChiudiTeleconsultoRequest, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (chiudiTeleconsultoRequest === null || chiudiTeleconsultoRequest === undefined) {
            throw new Error('Required parameter chiudiTeleconsultoRequest was null or undefined when calling chiudiTeleconsultoUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling chiudiTeleconsultoUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ChiudiTeleconsultoResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}/chiudi`,
            chiudiTeleconsultoRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #15 | Crea il teleconsulto. | US3.002– Crea un teleconsulto
     * 
     * @param createTeleconsultoRequest createTeleconsultoRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTeleconsultoUsingPUT(createTeleconsultoRequest: CreateTeleconsultoRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateTeleconsultoResponse>;
    public createTeleconsultoUsingPUT(createTeleconsultoRequest: CreateTeleconsultoRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateTeleconsultoResponse>>;
    public createTeleconsultoUsingPUT(createTeleconsultoRequest: CreateTeleconsultoRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateTeleconsultoResponse>>;
    public createTeleconsultoUsingPUT(createTeleconsultoRequest: CreateTeleconsultoRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (createTeleconsultoRequest === null || createTeleconsultoRequest === undefined) {
            throw new Error('Required parameter createTeleconsultoRequest was null or undefined when calling createTeleconsultoUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CreateTeleconsultoResponse>(`${this.basePath}/teleconsulti/create`,
            createTeleconsultoRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #18 | Elimina un teleconsulto. | US3.005– Elimina teleconsulto
     * 
     * @param id ID teleconsulto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTeleconsultoUsingDELETE(id: string, observe?: 'body', reportProgress?: boolean): Observable<DeleteTeleconsultoResponse>;
    public deleteTeleconsultoUsingDELETE(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DeleteTeleconsultoResponse>>;
    public deleteTeleconsultoUsingDELETE(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DeleteTeleconsultoResponse>>;
    public deleteTeleconsultoUsingDELETE(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTeleconsultoUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<DeleteTeleconsultoResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #32 | Ritorna l’elenco dei teleconsulti creati filtrati per lo stato impostato. | US3.001– Visualizza elenco “teleconsulti”
     * 
     * @param idSpecialista ID specialista
     * @param stato Stato
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTeleconsultiCreatiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe?: 'body', reportProgress?: boolean): Observable<TeleconsultoListaCreatiSpecialistaResponse>;
    public findAllTeleconsultiCreatiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeleconsultoListaCreatiSpecialistaResponse>>;
    public findAllTeleconsultiCreatiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeleconsultoListaCreatiSpecialistaResponse>>;
    public findAllTeleconsultiCreatiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idSpecialista === null || idSpecialista === undefined) {
            throw new Error('Required parameter idSpecialista was null or undefined when calling findAllTeleconsultiCreatiBySpecialistaAndStatoUsingGET.');
        }

        if (stato === null || stato === undefined) {
            throw new Error('Required parameter stato was null or undefined when calling findAllTeleconsultiCreatiBySpecialistaAndStatoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idSpecialista !== undefined && idSpecialista !== null) {
            queryParameters = queryParameters.set('idSpecialista', <any>idSpecialista);
        }
        if (stato !== undefined && stato !== null) {
            queryParameters = queryParameters.set('stato', <any>stato);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TeleconsultoListaCreatiSpecialistaResponse>(`${this.basePath}/teleconsulti/get-creati-by-specialista-and-stato`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #13 | Ritorna l’elenco dei teleconsulti creati (inviati). | US3.001– Visualizza elenco “teleconsulti”
     * 
     * @param idSpecialista ID specialista
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTeleconsultiCreatiBySpecialistaUsingGET(idSpecialista: string, observe?: 'body', reportProgress?: boolean): Observable<TeleconsultoListaCreatiSpecialistaResponse>;
    public findAllTeleconsultiCreatiBySpecialistaUsingGET(idSpecialista: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeleconsultoListaCreatiSpecialistaResponse>>;
    public findAllTeleconsultiCreatiBySpecialistaUsingGET(idSpecialista: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeleconsultoListaCreatiSpecialistaResponse>>;
    public findAllTeleconsultiCreatiBySpecialistaUsingGET(idSpecialista: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idSpecialista === null || idSpecialista === undefined) {
            throw new Error('Required parameter idSpecialista was null or undefined when calling findAllTeleconsultiCreatiBySpecialistaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idSpecialista !== undefined && idSpecialista !== null) {
            queryParameters = queryParameters.set('idSpecialista', <any>idSpecialista);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TeleconsultoListaCreatiSpecialistaResponse>(`${this.basePath}/teleconsulti/get-creati-by-specialista`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #32 | Ritorna l’elenco dei teleconsulti ricevuti filtrati per lo stato impostato. | US3.001– Visualizza elenco “teleconsulti”
     * 
     * @param idSpecialista ID specialista
     * @param stato Stato
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTeleconsultiRicevutiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe?: 'body', reportProgress?: boolean): Observable<TeleconsultoListaRicevutiSpecialistaResponse>;
    public findAllTeleconsultiRicevutiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeleconsultoListaRicevutiSpecialistaResponse>>;
    public findAllTeleconsultiRicevutiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeleconsultoListaRicevutiSpecialistaResponse>>;
    public findAllTeleconsultiRicevutiBySpecialistaAndStatoUsingGET(idSpecialista: string, stato: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idSpecialista === null || idSpecialista === undefined) {
            throw new Error('Required parameter idSpecialista was null or undefined when calling findAllTeleconsultiRicevutiBySpecialistaAndStatoUsingGET.');
        }

        if (stato === null || stato === undefined) {
            throw new Error('Required parameter stato was null or undefined when calling findAllTeleconsultiRicevutiBySpecialistaAndStatoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idSpecialista !== undefined && idSpecialista !== null) {
            queryParameters = queryParameters.set('idSpecialista', <any>idSpecialista);
        }
        if (stato !== undefined && stato !== null) {
            queryParameters = queryParameters.set('stato', <any>stato);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TeleconsultoListaRicevutiSpecialistaResponse>(`${this.basePath}/teleconsulti/get-ricevuti-by-specialista-and-stato`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #14 | Ritorna l’elenco dei teleconsulti ricevuti. | US3.001– Visualizza elenco “teleconsulti”
     * 
     * @param idSpecialista ID specialista
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTeleconsultiRicevutiBySpecialistaUsingGET(idSpecialista: string, observe?: 'body', reportProgress?: boolean): Observable<TeleconsultoListaRicevutiSpecialistaResponse>;
    public findAllTeleconsultiRicevutiBySpecialistaUsingGET(idSpecialista: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeleconsultoListaRicevutiSpecialistaResponse>>;
    public findAllTeleconsultiRicevutiBySpecialistaUsingGET(idSpecialista: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeleconsultoListaRicevutiSpecialistaResponse>>;
    public findAllTeleconsultiRicevutiBySpecialistaUsingGET(idSpecialista: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idSpecialista === null || idSpecialista === undefined) {
            throw new Error('Required parameter idSpecialista was null or undefined when calling findAllTeleconsultiRicevutiBySpecialistaUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idSpecialista !== undefined && idSpecialista !== null) {
            queryParameters = queryParameters.set('idSpecialista', <any>idSpecialista);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TeleconsultoListaRicevutiSpecialistaResponse>(`${this.basePath}/teleconsulti/get-ricevuti-by-specialista`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #22 | Ritorna il dettaglio dell’evento di teleconsulto schedulato in agenda. | US3.008– Visualizza evento teleconsulto in agenda
     * 
     * @param id ID teleconsulto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeleconsultoDettaglioEventoUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<TeleconsultoDettaglioEventoResponse>;
    public getTeleconsultoDettaglioEventoUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeleconsultoDettaglioEventoResponse>>;
    public getTeleconsultoDettaglioEventoUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeleconsultoDettaglioEventoResponse>>;
    public getTeleconsultoDettaglioEventoUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTeleconsultoDettaglioEventoUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TeleconsultoDettaglioEventoResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}/get-dettaglio-evento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #16 | Ritorna il dettaglio di un teleconsulto. | US3.004– Modifica teleconsulto
     * 
     * @param id ID teleconsulto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeleconsultoDettaglioUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<TeleconsultoDettaglioResponse>;
    public getTeleconsultoDettaglioUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TeleconsultoDettaglioResponse>>;
    public getTeleconsultoDettaglioUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TeleconsultoDettaglioResponse>>;
    public getTeleconsultoDettaglioUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTeleconsultoDettaglioUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TeleconsultoDettaglioResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}/get-dettaglio`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #20 | Rifiuta l’invito ad un teleconsulto. | US3.007– Rifiuta invito teleconsulto
     * 
     * @param id ID teleconsulto
     * @param idPartecipante ID partecipante
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rifiutaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe?: 'body', reportProgress?: boolean): Observable<UpdateTeleconsultoPartecipanteStatoResponse>;
    public rifiutaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTeleconsultoPartecipanteStatoResponse>>;
    public rifiutaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTeleconsultoPartecipanteStatoResponse>>;
    public rifiutaTeleconsultoUsingPOST(id: string, idPartecipante: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rifiutaTeleconsultoUsingPOST.');
        }

        if (idPartecipante === null || idPartecipante === undefined) {
            throw new Error('Required parameter idPartecipante was null or undefined when calling rifiutaTeleconsultoUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<UpdateTeleconsultoPartecipanteStatoResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}/partecipanti/${encodeURIComponent(String(idPartecipante))}/rifiuta`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #17 | Modifica un teleconsulto. | US3.004– Modifica teleconsulto
     * 
     * @param id ID teleconsulto
     * @param updateTeleconsultoRequest updateTeleconsultoRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTeleconsultoUsingPOST(id: string, updateTeleconsultoRequest: UpdateTeleconsultoRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateTeleconsultoResponse>;
    public updateTeleconsultoUsingPOST(id: string, updateTeleconsultoRequest: UpdateTeleconsultoRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTeleconsultoResponse>>;
    public updateTeleconsultoUsingPOST(id: string, updateTeleconsultoRequest: UpdateTeleconsultoRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTeleconsultoResponse>>;
    public updateTeleconsultoUsingPOST(id: string, updateTeleconsultoRequest: UpdateTeleconsultoRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTeleconsultoUsingPOST.');
        }

        if (updateTeleconsultoRequest === null || updateTeleconsultoRequest === undefined) {
            throw new Error('Required parameter updateTeleconsultoRequest was null or undefined when calling updateTeleconsultoUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateTeleconsultoResponse>(`${this.basePath}/teleconsulti/${encodeURIComponent(String(id))}/update`,
            updateTeleconsultoRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
