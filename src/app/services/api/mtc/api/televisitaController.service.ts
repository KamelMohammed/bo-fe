/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AvviaTelevisitaResponse } from '../model/avviaTelevisitaResponse';
import { ChiudiTelevisitaRequest } from '../model/chiudiTelevisitaRequest';
import { ChiudiTelevisitaResponse } from '../model/chiudiTelevisitaResponse';
import { ControllerErrorResponse } from '../model/controllerErrorResponse';
import { CreateEventoTelevisitaRequest } from '../model/createEventoTelevisitaRequest';
import { CreateEventoTelevisitaResponse } from '../model/createEventoTelevisitaResponse';
import { CreateRichiestaTelevisitaRequest } from '../model/createRichiestaTelevisitaRequest';
import { CreateRichiestaTelevisitaResponse } from '../model/createRichiestaTelevisitaResponse';
import { RespingiRichiestaTelevisitaRequest } from '../model/respingiRichiestaTelevisitaRequest';
import { TelevisitaDettaglioSchedaEventoResponse } from '../model/televisitaDettaglioSchedaEventoResponse';
import { TelevisitaListaRichiesteAssistitoResponse } from '../model/televisitaListaRichiesteAssistitoResponse';
import { TelevisitaListaRichiesteMedicoResponse } from '../model/televisitaListaRichiesteMedicoResponse';
import { TelevisitaSezioneAssistitoResponse } from '../model/televisitaSezioneAssistitoResponse';
import { TelevisitaSezioneMedicoResponse } from '../model/televisitaSezioneMedicoResponse';
import { UpdateRichiestaTelevisitaRequest } from '../model/updateRichiestaTelevisitaRequest';
import { UpdateRichiestaTelevisitaResponse } from '../model/updateRichiestaTelevisitaResponse';
import { UpdateTelevisitaRequest } from '../model/updateTelevisitaRequest';
import { UpdateTelevisitaResponse } from '../model/updateTelevisitaResponse';
import { UpdateTelevisitaStatoResponse } from '../model/updateTelevisitaStatoResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TelevisitaControllerService {

    protected basePath = 'http://127.0.0.1:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Servizio #28 | Accetta l’evento di televisita. | US2.006– Accetta evento televisita
     * 
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accettaTelevisitaUsingPOST(id: string, observe?: 'body', reportProgress?: boolean): Observable<UpdateTelevisitaStatoResponse>;
    public accettaTelevisitaUsingPOST(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTelevisitaStatoResponse>>;
    public accettaTelevisitaUsingPOST(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTelevisitaStatoResponse>>;
    public accettaTelevisitaUsingPOST(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling accettaTelevisitaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<UpdateTelevisitaStatoResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/accetta`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #23 | Gestisce l’integrazione con il sistema di terze parti Zoom. | US4.001– Avvia televisita/teleconsulto 
     * 
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public avviaTelevisitaUsingPOST(id: string, observe?: 'body', reportProgress?: boolean): Observable<AvviaTelevisitaResponse>;
    public avviaTelevisitaUsingPOST(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AvviaTelevisitaResponse>>;
    public avviaTelevisitaUsingPOST(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AvviaTelevisitaResponse>>;
    public avviaTelevisitaUsingPOST(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling avviaTelevisitaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<AvviaTelevisitaResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/avvia`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #24 | Salva l’esito del collegamento di Televisita. | US4.002– Chiude televisita/teleconsulto
     * 
     * @param chiudiTelevisitaRequest chiudiTelevisitaRequest
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chiudiTelevisitaUsingPUT(chiudiTelevisitaRequest: ChiudiTelevisitaRequest, id: string, observe?: 'body', reportProgress?: boolean): Observable<ChiudiTelevisitaResponse>;
    public chiudiTelevisitaUsingPUT(chiudiTelevisitaRequest: ChiudiTelevisitaRequest, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChiudiTelevisitaResponse>>;
    public chiudiTelevisitaUsingPUT(chiudiTelevisitaRequest: ChiudiTelevisitaRequest, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChiudiTelevisitaResponse>>;
    public chiudiTelevisitaUsingPUT(chiudiTelevisitaRequest: ChiudiTelevisitaRequest, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (chiudiTelevisitaRequest === null || chiudiTelevisitaRequest === undefined) {
            throw new Error('Required parameter chiudiTelevisitaRequest was null or undefined when calling chiudiTelevisitaUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling chiudiTelevisitaUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ChiudiTelevisitaResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/chiudi`,
            chiudiTelevisitaRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #31 | Salva la televisita nello stato “Accettata” e schedula l’evento nell’agenda degli utenti coinvolti. | US2.008 – Crea evento di televisita
     * 
     * @param createEventoTelevisitaRequest createEventoTelevisitaRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEventoTelevisitaUsingPUT(createEventoTelevisitaRequest: CreateEventoTelevisitaRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateEventoTelevisitaResponse>;
    public createEventoTelevisitaUsingPUT(createEventoTelevisitaRequest: CreateEventoTelevisitaRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateEventoTelevisitaResponse>>;
    public createEventoTelevisitaUsingPUT(createEventoTelevisitaRequest: CreateEventoTelevisitaRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateEventoTelevisitaResponse>>;
    public createEventoTelevisitaUsingPUT(createEventoTelevisitaRequest: CreateEventoTelevisitaRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (createEventoTelevisitaRequest === null || createEventoTelevisitaRequest === undefined) {
            throw new Error('Required parameter createEventoTelevisitaRequest was null or undefined when calling createEventoTelevisitaUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CreateEventoTelevisitaResponse>(`${this.basePath}/televisite/create-evento`,
            createEventoTelevisitaRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #3 | Salva la richiesta fatta nello stato “presentata”. | US1.002 – Crea una richiesta di televisita
     * 
     * @param createTelevisitaRequest createTelevisitaRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRichiestaTelevisitaUsingPUT(createTelevisitaRequest: CreateRichiestaTelevisitaRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateRichiestaTelevisitaResponse>;
    public createRichiestaTelevisitaUsingPUT(createTelevisitaRequest: CreateRichiestaTelevisitaRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateRichiestaTelevisitaResponse>>;
    public createRichiestaTelevisitaUsingPUT(createTelevisitaRequest: CreateRichiestaTelevisitaRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateRichiestaTelevisitaResponse>>;
    public createRichiestaTelevisitaUsingPUT(createTelevisitaRequest: CreateRichiestaTelevisitaRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (createTelevisitaRequest === null || createTelevisitaRequest === undefined) {
            throw new Error('Required parameter createTelevisitaRequest was null or undefined when calling createRichiestaTelevisitaUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CreateRichiestaTelevisitaResponse>(`${this.basePath}/televisite/create-richiesta`,
            createTelevisitaRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #1 | Ritorna l’elenco delle richieste di televisita effettuate dal singolo assistito. | US1.001 – Visualizza elenco richieste di televisita
     * 
     * @param idAssistito ID assistito
     * @param idCartella ID cartella
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTelevisiteByAssistitoUsingGET(idAssistito: string, idCartella?: string, observe?: 'body', reportProgress?: boolean): Observable<TelevisitaListaRichiesteAssistitoResponse>;
    public findAllTelevisiteByAssistitoUsingGET(idAssistito: string, idCartella?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TelevisitaListaRichiesteAssistitoResponse>>;
    public findAllTelevisiteByAssistitoUsingGET(idAssistito: string, idCartella?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TelevisitaListaRichiesteAssistitoResponse>>;
    public findAllTelevisiteByAssistitoUsingGET(idAssistito: string, idCartella?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idAssistito === null || idAssistito === undefined) {
            throw new Error('Required parameter idAssistito was null or undefined when calling findAllTelevisiteByAssistitoUsingGET.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idAssistito !== undefined && idAssistito !== null) {
            queryParameters = queryParameters.set('idAssistito', <any>idAssistito);
        }
        if (idCartella !== undefined && idCartella !== null) {
            queryParameters = queryParameters.set('idCartella', <any>idCartella);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TelevisitaListaRichiesteAssistitoResponse>(`${this.basePath}/televisite/get-by-assistito`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #8 | Ritorna l’elenco delle richieste ricevute, filtrato rispetto ai caratteri ricercati. | US2.001– Visualizza elenco richieste di televisita ricevute
     * 
     * @param idMedico ID medico
     * @param nomeCognome Filtro nome/cognome
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTelevisiteByMedicoAndNomeAssistitoUsingGET(idMedico: string, nomeCognome: string, observe?: 'body', reportProgress?: boolean): Observable<TelevisitaListaRichiesteMedicoResponse>;
    public findAllTelevisiteByMedicoAndNomeAssistitoUsingGET(idMedico: string, nomeCognome: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TelevisitaListaRichiesteMedicoResponse>>;
    public findAllTelevisiteByMedicoAndNomeAssistitoUsingGET(idMedico: string, nomeCognome: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TelevisitaListaRichiesteMedicoResponse>>;
    public findAllTelevisiteByMedicoAndNomeAssistitoUsingGET(idMedico: string, nomeCognome: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMedico === null || idMedico === undefined) {
            throw new Error('Required parameter idMedico was null or undefined when calling findAllTelevisiteByMedicoAndNomeAssistitoUsingGET.');
        }

        if (nomeCognome === null || nomeCognome === undefined) {
            throw new Error('Required parameter nomeCognome was null or undefined when calling findAllTelevisiteByMedicoAndNomeAssistitoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idMedico !== undefined && idMedico !== null) {
            queryParameters = queryParameters.set('idMedico', <any>idMedico);
        }
        if (nomeCognome !== undefined && nomeCognome !== null) {
            queryParameters = queryParameters.set('nomeCognome', <any>nomeCognome);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TelevisitaListaRichiesteMedicoResponse>(`${this.basePath}/televisite/get-by-medico-and-assistito`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #6 | Ritorna l’elenco delle televisite filtrate per lo stato impostato. | US2.001– Visualizza elenco richieste di televisita ricevute
     * 
     * @param idMedico ID medico
     * @param stato Stato
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTelevisiteByMedicoAndStatoUsingGET(idMedico: string, stato: string, observe?: 'body', reportProgress?: boolean): Observable<TelevisitaListaRichiesteMedicoResponse>;
    public findAllTelevisiteByMedicoAndStatoUsingGET(idMedico: string, stato: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TelevisitaListaRichiesteMedicoResponse>>;
    public findAllTelevisiteByMedicoAndStatoUsingGET(idMedico: string, stato: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TelevisitaListaRichiesteMedicoResponse>>;
    public findAllTelevisiteByMedicoAndStatoUsingGET(idMedico: string, stato: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMedico === null || idMedico === undefined) {
            throw new Error('Required parameter idMedico was null or undefined when calling findAllTelevisiteByMedicoAndStatoUsingGET.');
        }

        if (stato === null || stato === undefined) {
            throw new Error('Required parameter stato was null or undefined when calling findAllTelevisiteByMedicoAndStatoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idMedico !== undefined && idMedico !== null) {
            queryParameters = queryParameters.set('idMedico', <any>idMedico);
        }
        if (stato !== undefined && stato !== null) {
            queryParameters = queryParameters.set('stato', <any>stato);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TelevisitaListaRichiesteMedicoResponse>(`${this.basePath}/televisite/get-by-medico-and-stato`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #7 | Ritorna l’elenco delle richieste ricevute dal medico. | US2.001– Visualizza elenco richieste di televisita ricevute
     * 
     * @param idMedico ID medico
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllTelevisiteByMedicoUsingGET(idMedico: string, observe?: 'body', reportProgress?: boolean): Observable<TelevisitaListaRichiesteMedicoResponse>;
    public findAllTelevisiteByMedicoUsingGET(idMedico: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TelevisitaListaRichiesteMedicoResponse>>;
    public findAllTelevisiteByMedicoUsingGET(idMedico: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TelevisitaListaRichiesteMedicoResponse>>;
    public findAllTelevisiteByMedicoUsingGET(idMedico: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idMedico === null || idMedico === undefined) {
            throw new Error('Required parameter idMedico was null or undefined when calling findAllTelevisiteByMedicoUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (idMedico !== undefined && idMedico !== null) {
            queryParameters = queryParameters.set('idMedico', <any>idMedico);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TelevisitaListaRichiesteMedicoResponse>(`${this.basePath}/televisite/get-by-medico`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #21 | Ritorna il dettaglio dell’evento di televisita schedulato in agenda. | US2.009– Visualizza evento televisita in agenda
     * 
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTelevisitaSchedaDettaglioEventoUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<TelevisitaDettaglioSchedaEventoResponse>;
    public getTelevisitaSchedaDettaglioEventoUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TelevisitaDettaglioSchedaEventoResponse>>;
    public getTelevisitaSchedaDettaglioEventoUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TelevisitaDettaglioSchedaEventoResponse>>;
    public getTelevisitaSchedaDettaglioEventoUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTelevisitaSchedaDettaglioEventoUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TelevisitaDettaglioSchedaEventoResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/get-scheda-dettaglio-evento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #4 | Ritorna il dettaglio della sezione assistito di una richiesta di televisita. | US1.004– Visualizza dettaglio richiesta di televisita
     * 
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTelevisitaSezioneAssistitoUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<TelevisitaSezioneAssistitoResponse>;
    public getTelevisitaSezioneAssistitoUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TelevisitaSezioneAssistitoResponse>>;
    public getTelevisitaSezioneAssistitoUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TelevisitaSezioneAssistitoResponse>>;
    public getTelevisitaSezioneAssistitoUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTelevisitaSezioneAssistitoUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TelevisitaSezioneAssistitoResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/get-sezione-assistito`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #26 | Ritorna il dettaglio della sezione dedicata al medico in una richiesta di televisita. | US1.004– Visualizza dettaglio richiesta di televisita
     * 
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTelevisitaSezioneMedicoUsingGET(id: string, observe?: 'body', reportProgress?: boolean): Observable<TelevisitaSezioneMedicoResponse>;
    public getTelevisitaSezioneMedicoUsingGET(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TelevisitaSezioneMedicoResponse>>;
    public getTelevisitaSezioneMedicoUsingGET(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TelevisitaSezioneMedicoResponse>>;
    public getTelevisitaSezioneMedicoUsingGET(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTelevisitaSezioneMedicoUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TelevisitaSezioneMedicoResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/get-sezione-medico`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #12 | Respinge la richiesta portandola nello stato “Respinta” e salva la motivazione. | US2.002– Respinge una televisita
     * 
     * @param id ID televisita
     * @param respingiRichiestaTelevisitaRequest respingiRichiestaTelevisitaRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public respingiTelevisitaConMotivazioneUsingPOST(id: string, respingiRichiestaTelevisitaRequest: RespingiRichiestaTelevisitaRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateTelevisitaStatoResponse>;
    public respingiTelevisitaConMotivazioneUsingPOST(id: string, respingiRichiestaTelevisitaRequest: RespingiRichiestaTelevisitaRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTelevisitaStatoResponse>>;
    public respingiTelevisitaConMotivazioneUsingPOST(id: string, respingiRichiestaTelevisitaRequest: RespingiRichiestaTelevisitaRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTelevisitaStatoResponse>>;
    public respingiTelevisitaConMotivazioneUsingPOST(id: string, respingiRichiestaTelevisitaRequest: RespingiRichiestaTelevisitaRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling respingiTelevisitaConMotivazioneUsingPOST.');
        }

        if (respingiRichiestaTelevisitaRequest === null || respingiRichiestaTelevisitaRequest === undefined) {
            throw new Error('Required parameter respingiRichiestaTelevisitaRequest was null or undefined when calling respingiTelevisitaConMotivazioneUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateTelevisitaStatoResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/respingi-richiesta`,
            respingiRichiestaTelevisitaRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #29 | Rifiuta l’evento di televisita. | US2.007– Rifiuta evento televisita
     * 
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rifiutaTelevisitaUsingPOST(id: string, observe?: 'body', reportProgress?: boolean): Observable<UpdateTelevisitaStatoResponse>;
    public rifiutaTelevisitaUsingPOST(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTelevisitaStatoResponse>>;
    public rifiutaTelevisitaUsingPOST(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTelevisitaStatoResponse>>;
    public rifiutaTelevisitaUsingPOST(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rifiutaTelevisitaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<UpdateTelevisitaStatoResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/rifiuta`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #5 | Ritira la televisita e porta la richiesta nello stato \&quot;Ritirata\&quot;. | US1.003– Ritira richiesta di televisita
     * 
     * @param id ID televisita
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ritiraTelevisitaUsingPOST(id: string, observe?: 'body', reportProgress?: boolean): Observable<UpdateTelevisitaStatoResponse>;
    public ritiraTelevisitaUsingPOST(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTelevisitaStatoResponse>>;
    public ritiraTelevisitaUsingPOST(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTelevisitaStatoResponse>>;
    public ritiraTelevisitaUsingPOST(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ritiraTelevisitaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<UpdateTelevisitaStatoResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/ritira-richiesta`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #11 | Salva i campi compilati e porta la richiesta nello stato “Presa in carico”. | US2.004– Prende in carico una richiesta di televisita
     * 
     * @param id ID televisita
     * @param updateTelevisitaRequest updateTelevisitaRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAndPrendiInCaricoTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateTelevisitaResponse>;
    public updateAndPrendiInCaricoTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTelevisitaResponse>>;
    public updateAndPrendiInCaricoTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTelevisitaResponse>>;
    public updateAndPrendiInCaricoTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateAndPrendiInCaricoTelevisitaUsingPOST.');
        }

        if (updateTelevisitaRequest === null || updateTelevisitaRequest === undefined) {
            throw new Error('Required parameter updateTelevisitaRequest was null or undefined when calling updateAndPrendiInCaricoTelevisitaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateTelevisitaResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/update-prendi-in-carico`,
            updateTelevisitaRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #27 | Salva le modifiche apportate alla richiesta. | US1.005– Modifica richiesta di televisita
     * 
     * @param id ID televisita
     * @param updateRichiestaTelevisitaRequest updateRichiestaTelevisitaRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRichiestaTelevisitaUsingPOST(id: string, updateRichiestaTelevisitaRequest: UpdateRichiestaTelevisitaRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateRichiestaTelevisitaResponse>;
    public updateRichiestaTelevisitaUsingPOST(id: string, updateRichiestaTelevisitaRequest: UpdateRichiestaTelevisitaRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateRichiestaTelevisitaResponse>>;
    public updateRichiestaTelevisitaUsingPOST(id: string, updateRichiestaTelevisitaRequest: UpdateRichiestaTelevisitaRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateRichiestaTelevisitaResponse>>;
    public updateRichiestaTelevisitaUsingPOST(id: string, updateRichiestaTelevisitaRequest: UpdateRichiestaTelevisitaRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateRichiestaTelevisitaUsingPOST.');
        }

        if (updateRichiestaTelevisitaRequest === null || updateRichiestaTelevisitaRequest === undefined) {
            throw new Error('Required parameter updateRichiestaTelevisitaRequest was null or undefined when calling updateRichiestaTelevisitaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateRichiestaTelevisitaResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/update-richiesta`,
            updateRichiestaTelevisitaRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Servizio #27 | Salva le modifiche apportate alla richiesta/evento. | US2.005– Modifica una richiesta di televisita
     * 
     * @param id ID televisita
     * @param updateTelevisitaRequest updateTelevisitaRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe?: 'body', reportProgress?: boolean): Observable<UpdateTelevisitaResponse>;
    public updateTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateTelevisitaResponse>>;
    public updateTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateTelevisitaResponse>>;
    public updateTelevisitaUsingPOST(id: string, updateTelevisitaRequest: UpdateTelevisitaRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTelevisitaUsingPOST.');
        }

        if (updateTelevisitaRequest === null || updateTelevisitaRequest === undefined) {
            throw new Error('Required parameter updateTelevisitaRequest was null or undefined when calling updateTelevisitaUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UpdateTelevisitaResponse>(`${this.basePath}/televisite/${encodeURIComponent(String(id))}/update`,
            updateTelevisitaRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
